var _bundsol$boxed$Boxed$isCustom = function (boxed) {
	var _p0 = boxed;
	if (_p0.ctor === 'Custom') {
		return true;
	} else {
		return false;
	}
};
var _bundsol$boxed$Boxed$isTuple = function (boxed) {
	var _p1 = boxed;
	if (_p1.ctor === 'Tup') {
		return true;
	} else {
		return false;
	}
};
var _bundsol$boxed$Boxed$isList = function (boxed) {
	var _p2 = boxed;
	if (_p2.ctor === 'Lst') {
		return true;
	} else {
		return false;
	}
};
var _bundsol$boxed$Boxed$isDict = function (boxed) {
	var _p3 = boxed;
	if (_p3.ctor === 'Dictionary') {
		return true;
	} else {
		return false;
	}
};
var _bundsol$boxed$Boxed$isValue = function (boxed) {
	var _p4 = boxed;
	if (_p4.ctor === 'Json') {
		return true;
	} else {
		return false;
	}
};
var _bundsol$boxed$Boxed$isString = function (boxed) {
	var _p5 = boxed;
	if (_p5.ctor === 'Str') {
		return true;
	} else {
		return false;
	}
};
var _bundsol$boxed$Boxed$isFloat = function (boxed) {
	var _p6 = boxed;
	if (_p6.ctor === 'Double') {
		return true;
	} else {
		return false;
	}
};
var _bundsol$boxed$Boxed$isInt = function (boxed) {
	var _p7 = boxed;
	if (_p7.ctor === 'Integer') {
		return true;
	} else {
		return false;
	}
};
var _bundsol$boxed$Boxed$isBool = function (boxed) {
	var _p8 = boxed;
	if (_p8.ctor === 'Boolean') {
		return true;
	} else {
		return false;
	}
};
var _bundsol$boxed$Boxed$asList = function (boxed) {
	var _p9 = boxed;
	if (_p9.ctor === 'Lst') {
		return _p9._0;
	} else {
		return {ctor: '[]'};
	}
};
var _bundsol$boxed$Boxed$asDict = function (boxed) {
	var _p10 = boxed;
	if (_p10.ctor === 'Dictionary') {
		return _p10._0;
	} else {
		return _elm_lang$core$Dict$empty;
	}
};
var _bundsol$boxed$Boxed$asValue = function (boxed) {
	var _p11 = boxed;
	if (_p11.ctor === 'Json') {
		return _elm_lang$core$Maybe$Just(_p11._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _bundsol$boxed$Boxed$asString = function (boxed) {
	var _p12 = boxed;
	if (_p12.ctor === 'Str') {
		return _elm_lang$core$Maybe$Just(_p12._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _bundsol$boxed$Boxed$asFloat = function (boxed) {
	var _p13 = boxed;
	switch (_p13.ctor) {
		case 'Double':
			return _elm_lang$core$Maybe$Just(_p13._0);
		case 'Integer':
			return _elm_lang$core$Maybe$Just(
				_elm_lang$core$Basics$toFloat(_p13._0));
		default:
			return _elm_lang$core$Maybe$Nothing;
	}
};
var _bundsol$boxed$Boxed$asBool = function (boxed) {
	var _p14 = boxed;
	if (_p14.ctor === 'Boolean') {
		return _elm_lang$core$Maybe$Just(_p14._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _bundsol$boxed$Boxed$isTrue = function (boxed) {
	return _elm_lang$core$Native_Utils.eq(
		_bundsol$boxed$Boxed$asBool(boxed),
		_elm_lang$core$Maybe$Just(true));
};
var _bundsol$boxed$Boxed$asInt = function (boxed) {
	var _p15 = boxed;
	if (_p15.ctor === 'Integer') {
		return _elm_lang$core$Maybe$Just(_p15._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _bundsol$boxed$Boxed$Custom = function (a) {
	return {ctor: 'Custom', _0: a};
};
var _bundsol$boxed$Boxed$Tup = function (a) {
	return {ctor: 'Tup', _0: a};
};
var _bundsol$boxed$Boxed$Dictionary = function (a) {
	return {ctor: 'Dictionary', _0: a};
};
var _bundsol$boxed$Boxed$Lst = function (a) {
	return {ctor: 'Lst', _0: a};
};
var _bundsol$boxed$Boxed$Json = function (a) {
	return {ctor: 'Json', _0: a};
};
var _bundsol$boxed$Boxed$Str = function (a) {
	return {ctor: 'Str', _0: a};
};
var _bundsol$boxed$Boxed$Double = function (a) {
	return {ctor: 'Double', _0: a};
};
var _bundsol$boxed$Boxed$Integer = function (a) {
	return {ctor: 'Integer', _0: a};
};
var _bundsol$boxed$Boxed$Boolean = function (a) {
	return {ctor: 'Boolean', _0: a};
};
var _bundsol$boxed$Boxed$Null = {ctor: 'Null'};
var _bundsol$boxed$Boxed$isNull = function (boxed) {
	return _elm_lang$core$Native_Utils.eq(boxed, _bundsol$boxed$Boxed$Null);
};
