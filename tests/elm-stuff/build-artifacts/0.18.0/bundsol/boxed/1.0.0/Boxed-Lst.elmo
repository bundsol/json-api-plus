var _bundsol$boxed$Boxed_Lst$apply = F2(
	function ($function, boxed) {
		return $function(
			_bundsol$boxed$Boxed$asList(boxed));
	});
var _bundsol$boxed$Boxed_Lst$foldl = F3(
	function (build, accum, boxed) {
		return A2(
			_bundsol$boxed$Boxed_Lst$apply,
			A2(_elm_lang$core$List$foldl, build, accum),
			boxed);
	});
var _bundsol$boxed$Boxed_Lst$foldr = F3(
	function (build, accum, boxed) {
		return A2(
			_bundsol$boxed$Boxed_Lst$apply,
			A2(_elm_lang$core$List$foldr, build, accum),
			boxed);
	});
var _bundsol$boxed$Boxed_Lst$filterMap = F2(
	function (convert, boxed) {
		return A2(
			_bundsol$boxed$Boxed_Lst$apply,
			_elm_lang$core$List$filterMap(convert),
			boxed);
	});
var _bundsol$boxed$Boxed_Lst$mapHead = F2(
	function (convert, boxed) {
		return A2(
			_elm_lang$core$Maybe$andThen,
			convert,
			A2(_bundsol$boxed$Boxed_Lst$apply, _elm_lang$core$List$head, boxed));
	});
var _bundsol$boxed$Boxed_Lst$mapFind = F2(
	function (convert, boxed) {
		var repeat = function (t) {
			repeat:
			while (true) {
				var _p0 = t;
				if (_p0.ctor === '[]') {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					var _p1 = convert(_p0._0);
					if (_p1.ctor === 'Nothing') {
						var _v2 = _p0._1;
						t = _v2;
						continue repeat;
					} else {
						return _p1;
					}
				}
			}
		};
		return repeat(
			_bundsol$boxed$Boxed$asList(boxed));
	});
var _bundsol$boxed$Boxed_Lst$find = F2(
	function (test, boxed) {
		var repeat = function (t) {
			repeat:
			while (true) {
				var _p2 = t;
				if (_p2.ctor === '[]') {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					var _p3 = _p2._0;
					if (test(_p3)) {
						return _elm_lang$core$Maybe$Just(_p3);
					} else {
						var _v4 = _p2._1;
						t = _v4;
						continue repeat;
					}
				}
			}
		};
		return repeat(
			_bundsol$boxed$Boxed$asList(boxed));
	});
var _bundsol$boxed$Boxed_Lst_ops = _bundsol$boxed$Boxed_Lst_ops || {};
_bundsol$boxed$Boxed_Lst_ops[':::'] = F2(
	function (newMember, boxed) {
		return _bundsol$boxed$Boxed$Lst(
			{
				ctor: '::',
				_0: newMember,
				_1: _bundsol$boxed$Boxed$asList(boxed)
			});
	});
