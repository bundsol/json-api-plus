var _bundsol$json_api_plus$Reach$expectRetrieved = F2(
	function (r, g) {
		return A2(
			_elm_community$elm_test$Test$test,
			A2(_elm_lang$core$Basics_ops['++'], 'Regarding field type ', r.primitive),
			function (_p0) {
				var wrongPath = {
					ctor: '::',
					_0: 'option-pack',
					_1: {
						ctor: '::',
						_0: 'bogus',
						_1: {
							ctor: '::',
							_0: 'predecesor',
							_1: {ctor: '[]'}
						}
					}
				};
				var defaultRetrieval = A4(r.defaultGetter, r.defaultValue, wrongPath, r.propertyName, g);
				var fields = {
					ctor: '::',
					_0: 'option-pack',
					_1: {
						ctor: '::',
						_0: 'bogus',
						_1: {
							ctor: '::',
							_0: 'predecessor',
							_1: {ctor: '[]'}
						}
					}
				};
				var exists = !_elm_lang$core$Native_Utils.eq(
					A2(_bundsol$json_api_plus$JsonApi_Relationship$reach, fields, g),
					_elm_lang$core$Maybe$Nothing);
				var goodRetrieval = A4(r.defaultGetter, r.defaultValue, fields, r.propertyName, g);
				var retrieved = A3(r.getter, fields, r.propertyName, g);
				return A2(
					_elm_community$elm_test$Expect$equal,
					{
						ctor: '_Tuple4',
						_0: r.value,
						_1: r.defaultValue,
						_2: _elm_lang$core$Maybe$Just(r.value),
						_3: true
					},
					{ctor: '_Tuple4', _0: goodRetrieval, _1: defaultRetrieval, _2: retrieved, _3: exists});
			});
	});
var _bundsol$json_api_plus$Reach$seePredecessor = function (name) {
	return A2(
		_elm_community$elm_test$Test$test,
		name,
		function (_p1) {
			return A2(
				_elm_community$elm_test$Expect$notEqual,
				_elm_lang$core$Maybe$Nothing,
				A2(
					_elm_lang$core$Maybe$andThen,
					_bundsol$json_api_plus$JsonApi_Relationship$getIdr('predecessor'),
					A2(
						_elm_lang$core$Maybe$map,
						_bundsol$json_api_plus$JsonApi$setIdr(_bundsol$json_api_plus$JsonApi_Test_SampleData$newPurchaseGuide),
						A2(
							_elm_lang$core$Maybe$andThen,
							_bundsol$json_api_plus$JsonApi_Relationship$getIdr('bogus'),
							A2(
								_elm_lang$core$Maybe$map,
								_bundsol$json_api_plus$JsonApi$setIdr(_bundsol$json_api_plus$JsonApi_Test_SampleData$newPurchaseGuide),
								A2(_bundsol$json_api_plus$JsonApi_Relationship$getIdr, 'option-pack', _bundsol$json_api_plus$JsonApi_Test_SampleData$newPurchaseGuide))))));
		});
};
var _bundsol$json_api_plus$Reach$seeOptionPack = function (name) {
	return A2(
		_elm_community$elm_test$Test$test,
		name,
		function (_p2) {
			return A2(
				_elm_community$elm_test$Expect$notEqual,
				_elm_lang$core$Maybe$Nothing,
				A2(_bundsol$json_api_plus$JsonApi_Relationship$getIdr, 'option-pack', _bundsol$json_api_plus$JsonApi_Test_SampleData$newPurchaseGuide));
		});
};
var _bundsol$json_api_plus$Reach$seeEstablishment = function (name) {
	return A2(
		_elm_community$elm_test$Test$test,
		name,
		function (_p3) {
			return A2(
				_elm_community$elm_test$Expect$notEqual,
				_elm_lang$core$Maybe$Nothing,
				A2(_bundsol$json_api_plus$JsonApi_Relationship$getIdr, 'establishment', _bundsol$json_api_plus$JsonApi_Test_SampleData$newPurchaseGuide));
		});
};
var _bundsol$json_api_plus$Reach$goodAttributes = function (name) {
	return A2(
		_elm_community$elm_test$Test$test,
		name,
		function (_p4) {
			return A2(
				_elm_community$elm_test$Expect$notEqual,
				_elm_lang$core$Maybe$Nothing,
				A2(_bundsol$json_api_plus$JsonApi_Getter$getProperty, 'creation-date', _bundsol$json_api_plus$JsonApi_Test_SampleData$newPurchaseGuide));
		});
};
var _bundsol$json_api_plus$Reach$Retrieval = F6(
	function (a, b, c, d, e, f) {
		return {primitive: a, defaultValue: b, value: c, propertyName: d, defaultGetter: e, getter: f};
	});
var _bundsol$json_api_plus$Reach$testList = A2(
	_elm_lang$core$List$map,
	F2(
		function (x, y) {
			return y(x);
		})(_bundsol$json_api_plus$JsonApi_Test_SampleData$newPurchaseGuide),
	{
		ctor: '::',
		_0: _bundsol$json_api_plus$Reach$expectRetrieved(
			A6(_bundsol$json_api_plus$Reach$Retrieval, 'Int', 777, 5, 'rank', _bundsol$json_api_plus$JsonApi_Getter$reachDefaultInt, _bundsol$json_api_plus$JsonApi_Getter$reachInt)),
		_1: {
			ctor: '::',
			_0: _bundsol$json_api_plus$Reach$expectRetrieved(
				A6(_bundsol$json_api_plus$Reach$Retrieval, 'Float', 7.777, 8.889, 'quote-amount', _bundsol$json_api_plus$JsonApi_Getter$reachDefaultFloat, _bundsol$json_api_plus$JsonApi_Getter$reachFloat)),
			_1: {
				ctor: '::',
				_0: _bundsol$json_api_plus$Reach$expectRetrieved(
					A6(_bundsol$json_api_plus$Reach$Retrieval, 'String', 'Fallback value', 'Adorable thing', 'name', _bundsol$json_api_plus$JsonApi_Getter$reachDefaultString, _bundsol$json_api_plus$JsonApi_Getter$reachString)),
				_1: {
					ctor: '::',
					_0: _bundsol$json_api_plus$Reach$expectRetrieved(
						A6(_bundsol$json_api_plus$Reach$Retrieval, 'Bool', false, true, 'is-valid', _bundsol$json_api_plus$JsonApi_Getter$reachDefaultBool, _bundsol$json_api_plus$JsonApi_Getter$reachBool)),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _bundsol$json_api_plus$Reach$suite = A2(
	_elm_community$elm_test$Test$describe,
	'Testing reach- functions',
	{
		ctor: '::',
		_0: A2(_elm_community$elm_test$Test$describe, 'Fuzz the field name for inserts and retrievals of different types', _bundsol$json_api_plus$Reach$testList),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_community$elm_test$Test$describe,
				'Using valid guide',
				{
					ctor: '::',
					_0: _bundsol$json_api_plus$Reach$goodAttributes('Access to attributes'),
					_1: {
						ctor: '::',
						_0: _bundsol$json_api_plus$Reach$seeEstablishment('I can see the establishment relationship'),
						_1: {
							ctor: '::',
							_0: _bundsol$json_api_plus$Reach$seeOptionPack('I can see the option-pack relationship'),
							_1: {
								ctor: '::',
								_0: _bundsol$json_api_plus$Reach$seePredecessor('I can see the option-pack -> bogus -> predecessor  relationship'),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
