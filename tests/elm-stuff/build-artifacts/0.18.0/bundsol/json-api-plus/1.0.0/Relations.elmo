var _bundsol$json_api_plus$Relations$swap = function (name) {
	return A2(
		_elm_community$elm_test$Test$test,
		name,
		function (_p0) {
			var getName = F2(
				function (field, guide) {
					return A2(
						_elm_lang$core$Maybe$withDefault,
						'',
						A2(
							_elm_lang$core$Maybe$andThen,
							_bundsol$json_api_plus$JsonApi_Getter$getString('name'),
							A2(
								_elm_lang$core$Maybe$map,
								_bundsol$json_api_plus$JsonApi$setIdr(guide),
								A2(_bundsol$json_api_plus$JsonApi_Relationship$getIdr, field, guide))));
				});
			var path = {
				ctor: '::',
				_0: 'option-pack',
				_1: {
					ctor: '::',
					_0: 'establishments',
					_1: {ctor: '[]'}
				}
			};
			var criterion = function (object) {
				return _elm_lang$core$Native_Utils.eq(
					A2(_elm_lang$core$Dict$get, 'name', object.attributes),
					_elm_lang$core$Maybe$Just(
						_bundsol$boxed$Boxed$Str('Bob\'s Corner')));
			};
			var g = function () {
				var _p1 = A3(_bundsol$json_api_plus$JsonApi_Relationship$find, criterion, path, _bundsol$json_api_plus$JsonApi_Test_SampleData$newPurchaseGuide);
				if (_p1.ctor === 'Just') {
					return A3(
						_bundsol$json_api_plus$JsonApi_Relationship$setLocality,
						'potential-store',
						true,
						A3(_bundsol$json_api_plus$JsonApi_Relationship$relateSingle, 'potential-store', _p1._0, _bundsol$json_api_plus$JsonApi_Test_SampleData$newPurchaseGuide));
				} else {
					return _bundsol$json_api_plus$JsonApi_Test_SampleData$newPurchaseGuide;
				}
			}();
			var names = {
				ctor: '_Tuple2',
				_0: A2(getName, 'establishment', g),
				_1: A2(getName, 'potential-store', g)
			};
			var localities = {
				ctor: '_Tuple2',
				_0: A2(_bundsol$json_api_plus$JsonApi_Relationship$isLocal, 'establishment', g),
				_1: A2(_bundsol$json_api_plus$JsonApi_Relationship$isLocal, 'potential-store', g)
			};
			var swapped = A3(_bundsol$json_api_plus$JsonApi_Relationship$swapData, 'establishment', 'potential-store', g);
			var names2 = {
				ctor: '_Tuple2',
				_0: A2(getName, 'establishment', swapped),
				_1: A2(getName, 'potential-store', swapped)
			};
			var localities2 = {
				ctor: '_Tuple2',
				_0: A2(_bundsol$json_api_plus$JsonApi_Relationship$isLocal, 'establishment', swapped),
				_1: A2(_bundsol$json_api_plus$JsonApi_Relationship$isLocal, 'potential-store', swapped)
			};
			return A2(
				_elm_community$elm_test$Expect$equal,
				{ctor: '_Tuple4', _0: names, _1: localities, _2: names2, _3: localities2},
				{
					ctor: '_Tuple4',
					_0: {ctor: '_Tuple2', _0: 'Dollar Bargain', _1: 'Bob\'s Corner'},
					_1: {ctor: '_Tuple2', _0: false, _1: true},
					_2: {ctor: '_Tuple2', _0: 'Bob\'s Corner', _1: 'Dollar Bargain'},
					_3: {ctor: '_Tuple2', _0: false, _1: true}
				});
		});
};
var _bundsol$json_api_plus$Relations$sumBuilder = F2(
	function (o, accum) {
		var _p2 = A2(_elm_lang$core$Dict$get, 'price', o.attributes);
		if ((_p2.ctor === 'Just') && (_p2._0.ctor === 'Double')) {
			return accum + _p2._0._0;
		} else {
			return accum;
		}
	});
var _bundsol$json_api_plus$Relations$isMember = function (p) {
	return A2(
		_elm_lang$core$List$member,
		p,
		{
			ctor: '::',
			_0: _elm_lang$core$Maybe$Just(
				_bundsol$boxed$Boxed$Double(1.2)),
			_1: {
				ctor: '::',
				_0: _elm_lang$core$Maybe$Just(
					_bundsol$boxed$Boxed$Double(1.3)),
				_1: {ctor: '[]'}
			}
		});
};
var _bundsol$json_api_plus$Relations$oneOfMany = function (o) {
	return _bundsol$json_api_plus$Relations$isMember(
		A2(_elm_lang$core$Dict$get, 'price', o.attributes)) ? _elm_lang$core$Maybe$Just(o.idr) : _elm_lang$core$Maybe$Nothing;
};
var _bundsol$json_api_plus$Relations$goodStocksKey = 'good-stocks';
var _bundsol$json_api_plus$Relations$g = _bundsol$json_api_plus$JsonApi_Test_SampleData$userGuide;
var _bundsol$json_api_plus$Relations$oneMoreTest = function (name) {
	return A2(
		_elm_community$elm_test$Test$test,
		name,
		function (_p3) {
			var average = function () {
				var _p4 = A3(
					_bundsol$json_api_plus$JsonApi_Getter$reachFilterMap,
					_bundsol$json_api_plus$Relations$oneOfMany,
					{
						ctor: '::',
						_0: 'stocks',
						_1: {ctor: '[]'}
					},
					_bundsol$json_api_plus$Relations$g);
				if (((_p4.ctor === '::') && (_p4._1.ctor === '::')) && (_p4._1._1.ctor === '[]')) {
					return A2(
						F2(
							function (x, y) {
								return x * y;
							}),
						0.5,
						A4(
							_bundsol$json_api_plus$JsonApi_Getter$reachReduce,
							_bundsol$json_api_plus$Relations$sumBuilder,
							0.0,
							{
								ctor: '::',
								_0: _bundsol$json_api_plus$Relations$goodStocksKey,
								_1: {ctor: '[]'}
							},
							A3(
								_bundsol$json_api_plus$JsonApi_Relationship$relateOneMore,
								_bundsol$json_api_plus$Relations$goodStocksKey,
								_p4._1._0,
								A3(_bundsol$json_api_plus$JsonApi_Relationship$relateOneMore, _bundsol$json_api_plus$Relations$goodStocksKey, _p4._0, _bundsol$json_api_plus$Relations$g))));
				} else {
					return 0.0;
				}
			}();
			var listSize = _elm_lang$core$List$length(
				A2(
					_bundsol$json_api_plus$JsonApi_Relationship$reachMany,
					{
						ctor: '::',
						_0: 'stocks',
						_1: {ctor: '[]'}
					},
					_bundsol$json_api_plus$Relations$g));
			var firstWeGot = A2(_bundsol$json_api_plus$JsonApi_Relationship$getIdrs, _bundsol$json_api_plus$Relations$goodStocksKey, _bundsol$json_api_plus$Relations$g);
			return A2(
				_elm_community$elm_test$Expect$equal,
				{ctor: '_Tuple3', _0: firstWeGot, _1: average, _2: listSize},
				{
					ctor: '_Tuple3',
					_0: {ctor: '[]'},
					_1: 1.25,
					_2: 5
				});
		});
};
var _bundsol$json_api_plus$Relations$unrelateTest = function (name) {
	return A2(
		_elm_community$elm_test$Test$test,
		name,
		function (_p5) {
			var _p6 = function () {
				var _p7 = A3(
					_bundsol$json_api_plus$JsonApi_Getter$reachFilterMap,
					_bundsol$json_api_plus$Relations$oneOfMany,
					{
						ctor: '::',
						_0: 'stocks',
						_1: {ctor: '[]'}
					},
					_bundsol$json_api_plus$Relations$g);
				if (((_p7.ctor === '::') && (_p7._1.ctor === '::')) && (_p7._1._1.ctor === '[]')) {
					var _p8 = _p7._0;
					return A2(
						F2(
							function (v0, v1) {
								return {ctor: '_Tuple2', _0: v0, _1: v1};
							}),
						_p8,
						A3(
							_bundsol$json_api_plus$JsonApi_Relationship$relateOneMore,
							_bundsol$json_api_plus$Relations$goodStocksKey,
							_p7._1._0,
							A3(_bundsol$json_api_plus$JsonApi_Relationship$relateOneMore, _bundsol$json_api_plus$Relations$goodStocksKey, _p8, _bundsol$json_api_plus$Relations$g)));
				} else {
					return {ctor: '_Tuple2', _0: _bundsol$json_api_plus$JsonApi$emptyIdr, _1: _bundsol$json_api_plus$Relations$g};
				}
			}();
			var one = _p6._0;
			var newGuide = _p6._1;
			var sum = A4(
				_bundsol$json_api_plus$JsonApi_Getter$reachReduce,
				_bundsol$json_api_plus$Relations$sumBuilder,
				0.0,
				{
					ctor: '::',
					_0: _bundsol$json_api_plus$Relations$goodStocksKey,
					_1: {ctor: '[]'}
				},
				newGuide);
			var simplyOne = _elm_lang$core$Basics$floor(
				A4(
					_bundsol$json_api_plus$JsonApi_Getter$reachReduce,
					_bundsol$json_api_plus$Relations$sumBuilder,
					0.0,
					{
						ctor: '::',
						_0: _bundsol$json_api_plus$Relations$goodStocksKey,
						_1: {ctor: '[]'}
					},
					A3(_bundsol$json_api_plus$JsonApi_Relationship$unrelate, _bundsol$json_api_plus$Relations$goodStocksKey, one, newGuide)));
			return A2(
				_elm_community$elm_test$Expect$equal,
				{ctor: '_Tuple2', _0: sum, _1: simplyOne},
				{ctor: '_Tuple2', _0: 2.5, _1: 1});
		});
};
var _bundsol$json_api_plus$Relations$relationshipIsMany = function (name) {
	return A2(
		_elm_community$elm_test$Test$test,
		name,
		function (_p9) {
			var _p10 = function () {
				var _p11 = A3(
					_bundsol$json_api_plus$JsonApi_Getter$reachFilterMap,
					_bundsol$json_api_plus$Relations$oneOfMany,
					{
						ctor: '::',
						_0: 'stocks',
						_1: {ctor: '[]'}
					},
					_bundsol$json_api_plus$Relations$g);
				if (((_p11.ctor === '::') && (_p11._1.ctor === '::')) && (_p11._1._1.ctor === '[]')) {
					var _p12 = _p11._0;
					return A2(
						F2(
							function (v0, v1) {
								return {ctor: '_Tuple2', _0: v0, _1: v1};
							}),
						{ctor: '_Tuple2', _0: _p12, _1: _p11._1._0},
						A3(_bundsol$json_api_plus$JsonApi_Relationship$relateOneMore, _bundsol$json_api_plus$Relations$goodStocksKey, _p12, _bundsol$json_api_plus$Relations$g));
				} else {
					return {
						ctor: '_Tuple2',
						_0: _bundsol$json_api_plus$JsonApi_Base_Utility$tuplicate(_bundsol$json_api_plus$JsonApi$emptyIdr),
						_1: _bundsol$json_api_plus$Relations$g
					};
				}
			}();
			var one = _p10._0._0;
			var two = _p10._0._1;
			var newGuide = _p10._1;
			var idrsQty = _elm_lang$core$List$length(
				A2(_bundsol$json_api_plus$JsonApi_Relationship$getIdrs, _bundsol$json_api_plus$Relations$goodStocksKey, newGuide));
			var sameQty = _elm_lang$core$List$length(
				A2(
					_bundsol$json_api_plus$JsonApi_Relationship$getIdrs,
					_bundsol$json_api_plus$Relations$goodStocksKey,
					A3(_bundsol$json_api_plus$JsonApi_Relationship$relateSingle, _bundsol$json_api_plus$Relations$goodStocksKey, two, newGuide)));
			var firstWeGot = A2(_bundsol$json_api_plus$JsonApi_Relationship$getIdrs, _bundsol$json_api_plus$Relations$goodStocksKey, _bundsol$json_api_plus$Relations$g);
			return A2(
				_elm_community$elm_test$Expect$equal,
				{ctor: '_Tuple3', _0: firstWeGot, _1: idrsQty, _2: sameQty},
				{
					ctor: '_Tuple3',
					_0: {ctor: '[]'},
					_1: 1,
					_2: 1
				});
		});
};
var _bundsol$json_api_plus$Relations$favStockKey = 'fav-stock';
var _bundsol$json_api_plus$Relations$relationshipIsSingle = function (name) {
	return A2(
		_elm_community$elm_test$Test$test,
		name,
		function (_p13) {
			var _p14 = function () {
				var _p15 = A3(
					_bundsol$json_api_plus$JsonApi_Getter$reachFilterMap,
					_bundsol$json_api_plus$Relations$oneOfMany,
					{
						ctor: '::',
						_0: 'stocks',
						_1: {ctor: '[]'}
					},
					_bundsol$json_api_plus$Relations$g);
				if (((_p15.ctor === '::') && (_p15._1.ctor === '::')) && (_p15._1._1.ctor === '[]')) {
					var _p16 = _p15._0;
					return A2(
						F2(
							function (v0, v1) {
								return {ctor: '_Tuple2', _0: v0, _1: v1};
							}),
						{ctor: '_Tuple2', _0: _p16, _1: _p15._1._0},
						A3(_bundsol$json_api_plus$JsonApi_Relationship$relateSingle, _bundsol$json_api_plus$Relations$favStockKey, _p16, _bundsol$json_api_plus$Relations$g));
				} else {
					return {
						ctor: '_Tuple2',
						_0: _bundsol$json_api_plus$JsonApi_Base_Utility$tuplicate(_bundsol$json_api_plus$JsonApi$emptyIdr),
						_1: _bundsol$json_api_plus$Relations$g
					};
				}
			}();
			var one = _p14._0._0;
			var two = _p14._0._1;
			var newGuide = _p14._1;
			var thenWeGot = A2(
				_elm_lang$core$Maybe$withDefault,
				'',
				A2(
					_elm_lang$core$Maybe$map,
					_bundsol$json_api_plus$JsonApi$typeOf,
					A2(_bundsol$json_api_plus$JsonApi_Relationship$getIdr, _bundsol$json_api_plus$Relations$favStockKey, newGuide)));
			var ineffective = _elm_lang$core$List$length(
				A2(
					_bundsol$json_api_plus$JsonApi_Relationship$getIdrs,
					_bundsol$json_api_plus$Relations$favStockKey,
					A3(
						_bundsol$json_api_plus$JsonApi_Relationship$relateOneMore,
						_bundsol$json_api_plus$Relations$favStockKey,
						one,
						A3(_bundsol$json_api_plus$JsonApi_Relationship$relateOneMore, _bundsol$json_api_plus$Relations$favStockKey, two, newGuide))));
			var firstWeGot = A2(
				_elm_lang$core$Maybe$withDefault,
				'',
				A2(
					_elm_lang$core$Maybe$map,
					_bundsol$json_api_plus$JsonApi$typeOf,
					A2(_bundsol$json_api_plus$JsonApi_Relationship$getIdr, _bundsol$json_api_plus$Relations$favStockKey, _bundsol$json_api_plus$Relations$g)));
			return A2(
				_elm_community$elm_test$Expect$equal,
				{ctor: '_Tuple3', _0: firstWeGot, _1: thenWeGot, _2: ineffective},
				{ctor: '_Tuple3', _0: '', _1: 'stock', _2: 0});
		});
};
var _bundsol$json_api_plus$Relations$singlePick = function (o) {
	var _p17 = A2(_elm_lang$core$Dict$get, 'price', o.attributes);
	if (((_p17.ctor === 'Just') && (_p17._0.ctor === 'Double')) && (_p17._0._0 === 0.99)) {
		return _elm_lang$core$Maybe$Just(o.idr);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _bundsol$json_api_plus$Relations$reachManyTest = function (name) {
	return A2(
		_elm_community$elm_test$Test$test,
		name,
		function (_p18) {
			var relatedIdr = A2(
				_elm_lang$core$Maybe$withDefault,
				_bundsol$json_api_plus$JsonApi$emptyIdr,
				_elm_lang$core$List$head(
					A3(
						_bundsol$json_api_plus$JsonApi_Getter$reachFilterMap,
						_bundsol$json_api_plus$Relations$singlePick,
						{
							ctor: '::',
							_0: 'stocks',
							_1: {ctor: '[]'}
						},
						_bundsol$json_api_plus$Relations$g)));
			var price = A4(
				_bundsol$json_api_plus$JsonApi_Getter$reachDefaultFloat,
				2.55,
				{
					ctor: '::',
					_0: _bundsol$json_api_plus$Relations$favStockKey,
					_1: {ctor: '[]'}
				},
				'price',
				A3(_bundsol$json_api_plus$JsonApi_Relationship$relateSingle, _bundsol$json_api_plus$Relations$favStockKey, relatedIdr, _bundsol$json_api_plus$Relations$g));
			var listSize = _elm_lang$core$List$length(
				A2(
					_bundsol$json_api_plus$JsonApi_Relationship$reachMany,
					{
						ctor: '::',
						_0: 'stocks',
						_1: {ctor: '[]'}
					},
					_bundsol$json_api_plus$Relations$g));
			var firstWeGot = A2(_bundsol$json_api_plus$JsonApi_Relationship$getIdr, _bundsol$json_api_plus$Relations$favStockKey, _bundsol$json_api_plus$Relations$g);
			return A2(
				_elm_community$elm_test$Expect$equal,
				{ctor: '_Tuple3', _0: firstWeGot, _1: price, _2: listSize},
				{ctor: '_Tuple3', _0: _elm_lang$core$Maybe$Nothing, _1: 0.99, _2: 5});
		});
};
var _bundsol$json_api_plus$Relations$unrelateSingle = function (name) {
	return A2(
		_elm_community$elm_test$Test$test,
		name,
		function (_p19) {
			var relatedIdr = A2(
				_elm_lang$core$Maybe$withDefault,
				_bundsol$json_api_plus$JsonApi$emptyIdr,
				_elm_lang$core$List$head(
					A3(
						_bundsol$json_api_plus$JsonApi_Getter$reachFilterMap,
						_bundsol$json_api_plus$Relations$singlePick,
						{
							ctor: '::',
							_0: 'stocks',
							_1: {ctor: '[]'}
						},
						_bundsol$json_api_plus$Relations$g)));
			var newGuide = A3(_bundsol$json_api_plus$JsonApi_Relationship$relateSingle, _bundsol$json_api_plus$Relations$favStockKey, relatedIdr, _bundsol$json_api_plus$Relations$g);
			var price = A3(
				_bundsol$json_api_plus$JsonApi_Getter$reachFloat,
				{
					ctor: '::',
					_0: _bundsol$json_api_plus$Relations$favStockKey,
					_1: {ctor: '[]'}
				},
				'price',
				newGuide);
			var noPrice = A3(
				_bundsol$json_api_plus$JsonApi_Getter$reachFloat,
				{
					ctor: '::',
					_0: _bundsol$json_api_plus$Relations$favStockKey,
					_1: {ctor: '[]'}
				},
				'price',
				A3(_bundsol$json_api_plus$JsonApi_Relationship$unrelate, _bundsol$json_api_plus$Relations$favStockKey, relatedIdr, newGuide));
			var firstWeGot = A2(_bundsol$json_api_plus$JsonApi_Relationship$getIdr, _bundsol$json_api_plus$Relations$favStockKey, _bundsol$json_api_plus$Relations$g);
			return A2(
				_elm_community$elm_test$Expect$equal,
				{ctor: '_Tuple3', _0: firstWeGot, _1: price, _2: noPrice},
				{
					ctor: '_Tuple3',
					_0: _elm_lang$core$Maybe$Nothing,
					_1: _elm_lang$core$Maybe$Just(0.99),
					_2: _elm_lang$core$Maybe$Nothing
				});
		});
};
var _bundsol$json_api_plus$Relations$suite = A2(
	_elm_community$elm_test$Test$describe,
	'Establish relationships',
	{
		ctor: '::',
		_0: _bundsol$json_api_plus$Relations$reachManyTest('Now has another relationship taken from among many'),
		_1: {
			ctor: '::',
			_0: _bundsol$json_api_plus$Relations$oneMoreTest('Process many'),
			_1: {
				ctor: '::',
				_0: _bundsol$json_api_plus$Relations$unrelateTest('With one less'),
				_1: {
					ctor: '::',
					_0: _bundsol$json_api_plus$Relations$unrelateSingle('Gone the only one'),
					_1: {
						ctor: '::',
						_0: _bundsol$json_api_plus$Relations$relationshipIsMany('Relate Single ineffective'),
						_1: {
							ctor: '::',
							_0: _bundsol$json_api_plus$Relations$relationshipIsSingle('Relate One More ineffective'),
							_1: {
								ctor: '::',
								_0: _bundsol$json_api_plus$Relations$swap('Swap two relations\' data'),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		}
	});
