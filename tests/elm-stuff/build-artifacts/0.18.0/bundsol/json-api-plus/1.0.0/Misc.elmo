var _bundsol$json_api_plus$Misc$suite = A2(
	_elm_community$elm_test$Test$describe,
	'TopLevel Decoding',
	{
		ctor: '::',
		_0: A2(
			_elm_community$elm_test$Test$test,
			'query if boxed has the boolean value True',
			function (_p0) {
				return A2(
					_elm_community$elm_test$Expect$equal,
					{ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: true},
					A2(
						_elm_lang$core$Tuple$mapSecond,
						_bundsol$json_api_plus$JsonApi_Getter$isTrue('is-chosen'),
						A2(
							_elm_lang$core$Tuple$mapSecond,
							A2(_bundsol$json_api_plus$JsonApi_Setter$setBool, 'is-chosen', true),
							A2(
								_elm_lang$core$Tuple$mapFirst,
								_bundsol$json_api_plus$JsonApi_Getter$getProperty('is-chosen'),
								_bundsol$json_api_plus$JsonApi_Base_Utility$tuplicate(_bundsol$json_api_plus$JsonApi_Test_SampleData$userGuide)))));
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_community$elm_test$Test$test,
				'query if client side boxed has the boolean value True',
				function (_p1) {
					return A2(
						_elm_community$elm_test$Expect$equal,
						{ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: true},
						A2(
							_elm_lang$core$Tuple$mapSecond,
							_bundsol$json_api_plus$JsonApi_Getter$isLocalTrue('is-chosen'),
							A2(
								_elm_lang$core$Tuple$mapSecond,
								A2(_bundsol$json_api_plus$JsonApi_Setter$setLocalBool, 'is-chosen', true),
								A2(
									_elm_lang$core$Tuple$mapFirst,
									_bundsol$json_api_plus$JsonApi_Getter$getLocal('is-chosen'),
									_bundsol$json_api_plus$JsonApi_Base_Utility$tuplicate(_bundsol$json_api_plus$JsonApi_Test_SampleData$userGuide)))));
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_community$elm_test$Test$test,
					'verify you got the right new object',
					function (_p2) {
						return A2(
							_elm_community$elm_test$Expect$equal,
							_elm_lang$core$Maybe$Just(
								_bundsol$boxed$Boxed$Str('Dollar Bargain')),
							A2(
								_elm_lang$core$Maybe$andThen,
								_elm_lang$core$Dict$get('name'),
								A2(
									_elm_lang$core$Maybe$map,
									function (_) {
										return _.attributes;
									},
									A2(
										_bundsol$json_api_plus$JsonApi_Getter$reachObject,
										{
											ctor: '::',
											_0: 'establishment',
											_1: {ctor: '[]'}
										},
										_bundsol$json_api_plus$JsonApi_Test_SampleData$newPurchaseGuide))));
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_community$elm_test$Test$test,
						'get entire object',
						function (_p3) {
							return A2(
								_elm_community$elm_test$Expect$equal,
								_elm_lang$core$Maybe$Just(
									_bundsol$boxed$Boxed$Str('Sandy')),
								A2(
									_elm_lang$core$Maybe$andThen,
									_elm_lang$core$Dict$get('first-name'),
									A2(
										_elm_lang$core$Maybe$map,
										function (_) {
											return _.attributes;
										},
										_bundsol$json_api_plus$JsonApi_Getter$getObject(_bundsol$json_api_plus$JsonApi_Test_SampleData$userGuide))));
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_community$elm_test$Test$test,
							'get an actual string as a jsonapi \'id\' member',
							function (_p4) {
								return A2(
									_elm_community$elm_test$Expect$equal,
									{ctor: '_Tuple2', _0: '3', _1: ''},
									A2(
										_elm_lang$core$Tuple$mapSecond,
										_bundsol$json_api_plus$JsonApi_Getter$reachIdOrEmpty(
											{
												ctor: '::',
												_0: 'inexisting',
												_1: {ctor: '[]'}
											}),
										A2(
											_elm_lang$core$Tuple$mapFirst,
											_bundsol$json_api_plus$JsonApi_Getter$reachIdOrEmpty(
												{
													ctor: '::',
													_0: 'establishment',
													_1: {ctor: '[]'}
												}),
											_bundsol$json_api_plus$JsonApi_Base_Utility$tuplicate(_bundsol$json_api_plus$JsonApi_Test_SampleData$newPurchaseGuide))));
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_community$elm_test$Test$test,
								'manipulate subfields',
								function (_p5) {
									return A2(
										_elm_community$elm_test$Expect$equal,
										{
											ctor: '_Tuple2',
											_0: _elm_lang$core$Maybe$Just(
												_bundsol$boxed$Boxed$Str('blue')),
											_1: _elm_lang$core$Maybe$Just(
												_bundsol$boxed$Boxed$Str('orange'))
										},
										A2(
											_elm_lang$core$Tuple$mapSecond,
											A2(_bundsol$json_api_plus$JsonApi_Getter$getSubfield, 'preferences', 'font-color'),
											A2(
												_elm_lang$core$Tuple$mapSecond,
												A3(
													_bundsol$json_api_plus$JsonApi_Setter$setSubfield,
													'preferences',
													'font-color',
													_bundsol$boxed$Boxed$Str('orange')),
												A2(
													_elm_lang$core$Tuple$mapFirst,
													A2(_bundsol$json_api_plus$JsonApi_Getter$getSubfield, 'preferences', 'font-color'),
													_bundsol$json_api_plus$JsonApi_Base_Utility$tuplicate(_bundsol$json_api_plus$JsonApi_Test_SampleData$userGuide)))));
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_community$elm_test$Test$test,
									'set multiple properties at a time',
									function (_p6) {
										var modified = A2(
											_bundsol$json_api_plus$JsonApi_Setter$setProperties,
											{
												ctor: '::',
												_0: {
													ctor: '_Tuple2',
													_0: 'qualification',
													_1: _bundsol$boxed$Boxed$Integer(8)
												},
												_1: {
													ctor: '::',
													_0: {
														ctor: '_Tuple2',
														_0: 'status',
														_1: _bundsol$boxed$Boxed$Str('available')
													},
													_1: {ctor: '[]'}
												}
											},
											_bundsol$json_api_plus$JsonApi_Test_SampleData$userGuide);
										var getProps = function (g) {
											return A2(
												_elm_lang$core$Tuple$mapSecond,
												_bundsol$json_api_plus$JsonApi_Getter$getString('status'),
												A2(
													_elm_lang$core$Tuple$mapFirst,
													_bundsol$json_api_plus$JsonApi_Getter$getInt('qualification'),
													_bundsol$json_api_plus$JsonApi_Base_Utility$tuplicate(g)));
										};
										var firstWeGot = getProps(_bundsol$json_api_plus$JsonApi_Test_SampleData$userGuide);
										var thenWeGot = getProps(modified);
										return A2(
											_elm_community$elm_test$Expect$equal,
											{ctor: '_Tuple2', _0: firstWeGot, _1: thenWeGot},
											{
												ctor: '_Tuple2',
												_0: {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _elm_lang$core$Maybe$Nothing},
												_1: {
													ctor: '_Tuple2',
													_0: _elm_lang$core$Maybe$Just(8),
													_1: _elm_lang$core$Maybe$Just('available')
												}
											});
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_community$elm_test$Test$test,
										'set multiple client side values at a time',
										function (_p7) {
											var modified = A2(
												_bundsol$json_api_plus$JsonApi_Setter$setLocals,
												{
													ctor: '::',
													_0: {
														ctor: '_Tuple2',
														_0: 'qualification',
														_1: _bundsol$boxed$Boxed$Integer(8)
													},
													_1: {
														ctor: '::',
														_0: {
															ctor: '_Tuple2',
															_0: 'status',
															_1: _bundsol$boxed$Boxed$Str('available')
														},
														_1: {ctor: '[]'}
													}
												},
												_bundsol$json_api_plus$JsonApi_Test_SampleData$userGuide);
											var getProps = function (g) {
												return A2(
													_elm_lang$core$Tuple$mapSecond,
													_bundsol$json_api_plus$JsonApi_Getter$getLocalString('status'),
													A2(
														_elm_lang$core$Tuple$mapFirst,
														_bundsol$json_api_plus$JsonApi_Getter$getLocalInt('qualification'),
														_bundsol$json_api_plus$JsonApi_Base_Utility$tuplicate(g)));
											};
											var firstWeGot = getProps(_bundsol$json_api_plus$JsonApi_Test_SampleData$userGuide);
											var thenWeGot = getProps(modified);
											return A2(
												_elm_community$elm_test$Expect$equal,
												{ctor: '_Tuple2', _0: firstWeGot, _1: thenWeGot},
												{
													ctor: '_Tuple2',
													_0: {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _elm_lang$core$Maybe$Nothing},
													_1: {
														ctor: '_Tuple2',
														_0: _elm_lang$core$Maybe$Just(8),
														_1: _elm_lang$core$Maybe$Just('available')
													}
												});
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_community$elm_test$Test$test,
											'decodes valid json api document with list of objects as primary data',
											function (_p8) {
												var _p9 = _bundsol$json_api_plus$JsonApi_Test_SampleData$decodedList;
												if ((((_p9.ctor === 'Ok') && (_p9._0.ctor === '_Tuple2')) && (_p9._0._0.ctor === 'DataDoc')) && (_p9._0._0._0.ctor === 'Multiple')) {
													return A2(
														_elm_community$elm_test$Expect$greaterThan,
														0,
														_elm_lang$core$List$length(_p9._0._0._0._0));
												} else {
													return _elm_community$elm_test$Expect$fail('TopLevel with list did not conform to spec');
												}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_community$elm_test$Test$test,
												'decodes valid json api document with a single object as primary data',
												function (_p10) {
													var _p11 = _bundsol$json_api_plus$JsonApi_Test_SampleData$decodedObject;
													if (((((_p11.ctor === 'Ok') && (_p11._0.ctor === '_Tuple2')) && (_p11._0._0.ctor === 'DataDoc')) && (_p11._0._0._0.ctor === 'Single')) && (_p11._0._0._0._0.ctor === 'Just')) {
														return A2(
															_elm_community$elm_test$Expect$equal,
															_bundsol$json_api_plus$JsonApi$idOf(_p11._0._0._0._0._0),
															'2');
													} else {
														return _elm_community$elm_test$Expect$fail('TopLevel with single object did not conform to spec');
													}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_community$elm_test$Test$test,
													'decodes valid json api document with new object as primary data',
													function (_p12) {
														var _p13 = _bundsol$json_api_plus$JsonApi_Test_SampleData$decodedNewObject;
														if (((((_p13.ctor === 'Ok') && (_p13._0.ctor === '_Tuple2')) && (_p13._0._0.ctor === 'DataDoc')) && (_p13._0._0._0.ctor === 'Single')) && (_p13._0._0._0._0.ctor === 'Just')) {
															return A2(
																_elm_community$elm_test$Expect$true,
																'TopLevel should have had a non persisted resource',
																_bundsol$json_api_plus$JsonApi$isNew(_p13._0._0._0._0._0));
														} else {
															return _elm_community$elm_test$Expect$fail('TopLevel with \'new\' id did not conform to spec');
														}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_community$elm_test$Test$test,
														'should not accept document with empty id if \'meta\' doesn\'t say it is new',
														function (_p14) {
															return _elm_community$elm_test$Expect$err(
																A2(_elm_lang$core$Result$map, _elm_lang$core$Tuple$first, _bundsol$json_api_plus$JsonApi_Test_SampleData$decodedWrongObject));
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_community$elm_test$Test$test,
															'should be able to store and retrieve local properties',
															function (_p15) {
																return A2(
																	_elm_community$elm_test$Expect$equal,
																	_elm_lang$core$Maybe$Just(
																		_bundsol$boxed$Boxed$Str('test value')),
																	A2(
																		_bundsol$json_api_plus$JsonApi_Getter$getLocal,
																		'sample-prop',
																		A3(
																			_bundsol$json_api_plus$JsonApi_Setter$setLocal,
																			'sample-prop',
																			_bundsol$boxed$Boxed$Str('test value'),
																			_bundsol$json_api_plus$JsonApi_Test_SampleData$newPurchaseGuide)));
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_community$elm_test$Test$test,
																'retrieves dictionary as attribute',
																function (_p16) {
																	return A2(
																		_elm_community$elm_test$Expect$equal,
																		_elm_lang$core$Maybe$Just(
																			_bundsol$boxed$Boxed$Integer(45)),
																		A2(
																			_elm_lang$core$Maybe$andThen,
																			_bundsol$boxed$Boxed_Lst$apply(_elm_lang$core$List$head),
																			A2(
																				_elm_lang$core$Maybe$andThen,
																				_bundsol$boxed$Boxed_Dictionary$apply(
																					_elm_lang$core$Dict$get('allowed')),
																				A2(
																					_elm_lang$core$Maybe$andThen,
																					_bundsol$boxed$Boxed_Dictionary$apply(
																						_elm_lang$core$Dict$get('display')),
																					A2(
																						_elm_lang$core$Maybe$map,
																						_bundsol$boxed$Boxed_Json$expand,
																						A2(_bundsol$json_api_plus$JsonApi_Getter$getProperty, 'options', _bundsol$json_api_plus$JsonApi_Test_SampleData$userGuide))))));
																}),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
