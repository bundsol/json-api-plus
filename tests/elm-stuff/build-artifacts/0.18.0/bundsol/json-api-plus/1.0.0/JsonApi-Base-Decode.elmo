var _bundsol$json_api_plus$JsonApi_Base_Decode$reflect = function (decoder) {
	var log = function (result) {
		return _elm_lang$core$Json_Decode$succeed(
			A2(_elm_lang$core$Debug$log, 'PARTIAL RESULT...', result));
	};
	return A2(_elm_lang$core$Json_Decode$andThen, log, decoder);
};
var _bundsol$json_api_plus$JsonApi_Base_Decode$includedPresenceFail = function (arg) {
	var _p0 = arg;
	if (_p0.ctor === 'Nothing') {
		return _elm_lang$core$Json_Decode$succeed(_elm_lang$core$Dict$empty);
	} else {
		return _elm_lang$core$Json_Decode$fail('Only documents with \'data\' can have \'included\' resources');
	}
};
var _bundsol$json_api_plus$JsonApi_Base_Decode$preventIncludedPresence = A2(
	_elm_lang$core$Json_Decode$andThen,
	_bundsol$json_api_plus$JsonApi_Base_Decode$includedPresenceFail,
	_elm_lang$core$Json_Decode$maybe(
		A2(_elm_lang$core$Json_Decode$field, 'included', _elm_lang$core$Json_Decode$value)));
var _bundsol$json_api_plus$JsonApi_Base_Decode$failWithMessage = function (isForMetaDoc) {
	return _elm_lang$core$Json_Decode$fail(
		function () {
			var _p1 = isForMetaDoc;
			if (_p1 === true) {
				return 'At this point both \'data\' and \'errors\' fields have been unable to be decoded';
			} else {
				return 'The members \'data\' and \'errors\' MUST NOT coexist in the same document';
			}
		}());
};
var _bundsol$json_api_plus$JsonApi_Base_Decode$errorPresenceFail = F2(
	function (isForMetaDoc, arg) {
		var _p2 = arg;
		if (_p2.ctor === 'Nothing') {
			return _elm_lang$core$Json_Decode$succeed(
				{ctor: '[]'});
		} else {
			return _bundsol$json_api_plus$JsonApi_Base_Decode$failWithMessage(isForMetaDoc);
		}
	});
var _bundsol$json_api_plus$JsonApi_Base_Decode$preventErrorPresence = function (isForMetaDoc) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		_bundsol$json_api_plus$JsonApi_Base_Decode$errorPresenceFail(isForMetaDoc),
		_elm_lang$core$Json_Decode$maybe(
			A2(_elm_lang$core$Json_Decode$field, 'errors', _elm_lang$core$Json_Decode$value)));
};
var _bundsol$json_api_plus$JsonApi_Base_Decode$dataPresenceFail = F2(
	function (isForMetaDoc, arg) {
		var _p3 = arg;
		if (_p3.ctor === 'Nothing') {
			return _elm_lang$core$Json_Decode$succeed(_bundsol$json_api_plus$JsonApi_Base_Definition$NotPresent);
		} else {
			return _bundsol$json_api_plus$JsonApi_Base_Decode$failWithMessage(isForMetaDoc);
		}
	});
var _bundsol$json_api_plus$JsonApi_Base_Decode$preventDataPresence = function (isForMetaDoc) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		_bundsol$json_api_plus$JsonApi_Base_Decode$dataPresenceFail(isForMetaDoc),
		_elm_lang$core$Json_Decode$maybe(
			A2(_elm_lang$core$Json_Decode$field, 'data', _elm_lang$core$Json_Decode$value)));
};
var _bundsol$json_api_plus$JsonApi_Base_Decode$tagDocument = F3(
	function (idTagger, taggers, doc) {
		var _p4 = doc.data;
		switch (_p4.ctor) {
			case 'Id':
				return _elm_lang$core$Json_Decode$succeed(
					A3(
						_elm_lang$core$Basics$flip,
						F2(
							function (v0, v1) {
								return {ctor: '_Tuple2', _0: v0, _1: v1};
							}),
						doc,
						taggers.data.single(
							A2(_elm_lang$core$Maybe$map, idTagger, _p4._0))));
			case 'Ids':
				return _elm_lang$core$Json_Decode$succeed(
					A3(
						_elm_lang$core$Basics$flip,
						F2(
							function (v0, v1) {
								return {ctor: '_Tuple2', _0: v0, _1: v1};
							}),
						doc,
						taggers.data.multiple(
							A2(
								_elm_lang$core$List$map,
								idTagger,
								_elm_lang$core$Set$toList(_p4._0)))));
			default:
				return _elm_lang$core$Json_Decode$fail('no \'data\' element present');
		}
	});
var _bundsol$json_api_plus$JsonApi_Base_Decode$detectOne = function (fieldNames) {
	var callAgain = function (pair) {
		var _p5 = pair;
		if (_p5._1.ctor === 'Nothing') {
			if (_p5._0.ctor === '[]') {
				return _elm_lang$core$Json_Decode$succeed(false);
			} else {
				return A2(
					_elm_lang$core$Json_Decode$andThen,
					callAgain,
					A2(
						_elm_lang$core$Json_Decode$map,
						F2(
							function (v0, v1) {
								return {ctor: '_Tuple2', _0: v0, _1: v1};
							})(_p5._0._1),
						_elm_lang$core$Json_Decode$maybe(
							A2(_elm_lang$core$Json_Decode$field, _p5._0._0, _elm_lang$core$Json_Decode$value))));
			}
		} else {
			return _elm_lang$core$Json_Decode$succeed(true);
		}
	};
	return callAgain(
		{ctor: '_Tuple2', _0: fieldNames, _1: _elm_lang$core$Maybe$Nothing});
};
var _bundsol$json_api_plus$JsonApi_Base_Decode$checkForReservedNames = function (dict) {
	var _p6 = A2(
		_elm_lang$core$List$any,
		A2(_elm_lang$core$Basics$flip, _elm_lang$core$Dict$member, dict),
		{
			ctor: '::',
			_0: 'id',
			_1: {
				ctor: '::',
				_0: 'type',
				_1: {ctor: '[]'}
			}
		});
	if (_p6 === true) {
		return _elm_lang$core$Json_Decode$fail('No attribute can be named \'id\' or \'type\'');
	} else {
		return _elm_lang$core$Json_Decode$succeed(dict);
	}
};
var _bundsol$json_api_plus$JsonApi_Base_Decode$nonEmpty = function (fieldName) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		function (s) {
			var _p7 = _elm_lang$core$String$trim(s);
			if (_p7 === '') {
				return _elm_lang$core$Json_Decode$fail(
					A2(_elm_lang$core$Basics_ops['++'], fieldName, ' must not be empty'));
			} else {
				return _elm_lang$core$Json_Decode$succeed(s);
			}
		},
		A2(_elm_lang$core$Json_Decode$field, fieldName, _elm_lang$core$Json_Decode$string));
};
var _bundsol$json_api_plus$JsonApi_Base_Decode$persistedIdKey = A4(
	_elm_lang$core$Json_Decode$map3,
	_bundsol$json_api_plus$JsonApi_Base_Definition$buildKey,
	_bundsol$json_api_plus$JsonApi_Base_Decode$nonEmpty('type'),
	_bundsol$json_api_plus$JsonApi_Base_Decode$nonEmpty('id'),
	_elm_lang$core$Json_Decode$succeed(0));
var _bundsol$json_api_plus$JsonApi_Base_Decode$urlLinkDecoder = A2(_elm_lang$core$Json_Decode$map, _bundsol$json_api_plus$JsonApi_Base_Definition$UrlLink, _elm_lang$core$Json_Decode$string);
var _bundsol$json_api_plus$JsonApi_Base_Decode$ensureCorrect = F2(
	function (decoder, mv) {
		var _p8 = mv;
		if (_p8.ctor === 'Nothing') {
			return _elm_lang$core$Json_Decode$succeed(_elm_lang$core$Maybe$Nothing);
		} else {
			var _p9 = A2(_elm_lang$core$Json_Decode$decodeValue, decoder, _p8._0);
			if (_p9.ctor === 'Ok') {
				return _elm_lang$core$Json_Decode$succeed(
					_elm_lang$core$Maybe$Just(_p9._0));
			} else {
				return _elm_lang$core$Json_Decode$fail(_p9._0);
			}
		}
	});
var _bundsol$json_api_plus$JsonApi_Base_Decode$validateIfPresent = F2(
	function (fieldName, decoder) {
		return A2(
			_elm_lang$core$Json_Decode$andThen,
			_bundsol$json_api_plus$JsonApi_Base_Decode$ensureCorrect(decoder),
			_elm_lang$core$Json_Decode$maybe(
				A2(_elm_lang$core$Json_Decode$field, fieldName, _elm_lang$core$Json_Decode$value)));
	});
var _bundsol$json_api_plus$JsonApi_Base_Decode$optionalWithDefault = F3(
	function (defaultvalue, fieldName, decoder) {
		return A2(
			_elm_lang$core$Json_Decode$map,
			_elm_lang$core$Maybe$withDefault(defaultvalue),
			A2(_bundsol$json_api_plus$JsonApi_Base_Decode$validateIfPresent, fieldName, decoder));
	});
var _bundsol$json_api_plus$JsonApi_Base_Decode$absent = F3(
	function (defaultvalue, field, msg) {
		return A3(
			_bundsol$json_api_plus$JsonApi_Base_Decode$optionalWithDefault,
			defaultvalue,
			field,
			_elm_lang$core$Json_Decode$fail(msg));
	});
var _bundsol$json_api_plus$JsonApi_Base_Decode$nullOrAbsent = function (fieldName) {
	var msg = A2(
		_elm_lang$core$Basics_ops['++'],
		'In this case, no ',
		A2(_elm_lang$core$Basics_ops['++'], fieldName, ' would have been ok'));
	return _elm_lang$core$Json_Decode$oneOf(
		{
			ctor: '::',
			_0: A2(
				_elm_lang$core$Json_Decode$field,
				fieldName,
				_elm_lang$core$Json_Decode$null('')),
			_1: {
				ctor: '::',
				_0: A3(_bundsol$json_api_plus$JsonApi_Base_Decode$absent, '', fieldName, msg),
				_1: {ctor: '[]'}
			}
		});
};
var _bundsol$json_api_plus$JsonApi_Base_Decode$optionalErrorIdDecoder = function () {
	var decoder = _elm_lang$core$Json_Decode$oneOf(
		{
			ctor: '::',
			_0: _elm_lang$core$Json_Decode$string,
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Basics$toString, _elm_lang$core$Json_Decode$int),
				_1: {ctor: '[]'}
			}
		});
	return A3(_bundsol$json_api_plus$JsonApi_Base_Decode$optionalWithDefault, '', 'id', decoder);
}();
var _bundsol$json_api_plus$JsonApi_Base_Decode$generalDictionaryDecoder = function (primitiveDecoder) {
	return _elm_lang$core$Json_Decode$dict(primitiveDecoder);
};
var _bundsol$json_api_plus$JsonApi_Base_Decode$optionalAttributes = function (decoder) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		_bundsol$json_api_plus$JsonApi_Base_Decode$checkForReservedNames,
		A3(
			_bundsol$json_api_plus$JsonApi_Base_Decode$optionalWithDefault,
			_elm_lang$core$Dict$empty,
			'attributes',
			_bundsol$json_api_plus$JsonApi_Base_Decode$generalDictionaryDecoder(decoder)));
};
var _bundsol$json_api_plus$JsonApi_Base_Decode$strPairListDecoder = _elm_lang$core$Json_Decode$keyValuePairs(_elm_lang$core$Json_Decode$string);
var _bundsol$json_api_plus$JsonApi_Base_Decode$errorSourceDecoder = function () {
	var isNotReserved = function (_p10) {
		var _p11 = _p10;
		return !A2(
			_elm_lang$core$List$member,
			_p11._0,
			{
				ctor: '::',
				_0: 'pointer',
				_1: {
					ctor: '::',
					_0: 'parameter',
					_1: {ctor: '[]'}
				}
			});
	};
	var readyForFilter = function (fieldName) {
		return A2(
			_elm_lang$core$Json_Decode$map,
			_elm_lang$core$Maybe$map(
				F2(
					function (v0, v1) {
						return {ctor: '_Tuple2', _0: v0, _1: v1};
					})(fieldName)),
			A2(_bundsol$json_api_plus$JsonApi_Base_Decode$validateIfPresent, fieldName, _elm_lang$core$Json_Decode$string));
	};
	var two = F2(
		function (ma, mb) {
			return A2(
				_elm_lang$core$List$filterMap,
				_elm_lang$core$Basics$identity,
				{
					ctor: '::',
					_0: ma,
					_1: {
						ctor: '::',
						_0: mb,
						_1: {ctor: '[]'}
					}
				});
		});
	var reserved = A3(
		_elm_lang$core$Json_Decode$map2,
		two,
		readyForFilter('pointer'),
		readyForFilter('parameter'));
	var combine = A3(
		_elm_lang$core$Json_Decode$map2,
		F2(
			function (x, y) {
				return A2(_elm_lang$core$Basics_ops['++'], x, y);
			}),
		reserved,
		A2(
			_elm_lang$core$Json_Decode$map,
			_elm_lang$core$List$filter(isNotReserved),
			_bundsol$json_api_plus$JsonApi_Base_Decode$strPairListDecoder));
	return A3(
		_bundsol$json_api_plus$JsonApi_Base_Decode$optionalWithDefault,
		{ctor: '[]'},
		'source',
		combine);
}();
var _bundsol$json_api_plus$JsonApi_Base_Decode$generalPairListDecoder = function (primitiveDecoder) {
	return _elm_lang$core$Json_Decode$keyValuePairs(primitiveDecoder);
};
var _bundsol$json_api_plus$JsonApi_Base_Decode$optionalMetaDecoder = function (decoder) {
	return A3(
		_bundsol$json_api_plus$JsonApi_Base_Decode$optionalWithDefault,
		{ctor: '[]'},
		'meta',
		_bundsol$json_api_plus$JsonApi_Base_Decode$generalPairListDecoder(decoder));
};
var _bundsol$json_api_plus$JsonApi_Base_Decode$hrefDecoder = function (decoder) {
	return A2(
		_elm_lang$core$Json_Decode$map,
		_bundsol$json_api_plus$JsonApi_Base_Definition$HrefLink,
		A3(
			_elm_lang$core$Json_Decode$map2,
			_bundsol$json_api_plus$JsonApi_Base_Definition$Href,
			A2(_elm_lang$core$Json_Decode$field, 'href', _elm_lang$core$Json_Decode$string),
			_bundsol$json_api_plus$JsonApi_Base_Decode$optionalMetaDecoder(decoder)));
};
var _bundsol$json_api_plus$JsonApi_Base_Decode$linkDecoder = function (decoder) {
	return _elm_lang$core$Json_Decode$oneOf(
		{
			ctor: '::',
			_0: _bundsol$json_api_plus$JsonApi_Base_Decode$urlLinkDecoder,
			_1: {
				ctor: '::',
				_0: _bundsol$json_api_plus$JsonApi_Base_Decode$hrefDecoder(decoder),
				_1: {ctor: '[]'}
			}
		});
};
var _bundsol$json_api_plus$JsonApi_Base_Decode$optionallyAllowLinks = F3(
	function (decoder, fieldNames, emptyMgmt) {
		var isAllowed = function (item) {
			return A2(
				_elm_lang$core$List$member,
				_elm_lang$core$Tuple$first(item),
				fieldNames);
		};
		var isAllGood = function (links) {
			var noPass = _elm_lang$core$Json_Decode$fail(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'Only ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(fieldNames),
						' are allowed')));
			var pass = _elm_lang$core$Json_Decode$succeed(links);
			var _p12 = {
				ctor: '_Tuple3',
				_0: emptyMgmt,
				_1: _elm_lang$core$List$isEmpty(links),
				_2: A2(_elm_lang$core$List$all, isAllowed, links)
			};
			_v11_3:
			do {
				_v11_2:
				do {
					if (_p12.ctor === '_Tuple3') {
						if (_p12._0.ctor === 'AllowEmpties') {
							if (_p12._1 === true) {
								return pass;
							} else {
								if (_p12._2 === false) {
									break _v11_2;
								} else {
									break _v11_3;
								}
							}
						} else {
							if (_p12._1 === true) {
								return noPass;
							} else {
								if (_p12._2 === false) {
									break _v11_2;
								} else {
									break _v11_3;
								}
							}
						}
					} else {
						break _v11_3;
					}
				} while(false);
				return noPass;
			} while(false);
			return pass;
		};
		var frisk = function (maybeLinks) {
			var _p13 = maybeLinks;
			if (_p13.ctor === 'Nothing') {
				return _elm_lang$core$Json_Decode$succeed(
					{ctor: '[]'});
			} else {
				return isAllGood(_p13._0);
			}
		};
		return A2(
			_elm_lang$core$Json_Decode$andThen,
			frisk,
			A2(
				_bundsol$json_api_plus$JsonApi_Base_Decode$validateIfPresent,
				'links',
				_elm_lang$core$Json_Decode$keyValuePairs(
					_bundsol$json_api_plus$JsonApi_Base_Decode$linkDecoder(decoder))));
	});
var _bundsol$json_api_plus$JsonApi_Base_Decode$optionalJsonapiDecoder = function (decoder) {
	var jsonapiObject = A3(
		_elm_lang$core$Json_Decode$map2,
		_bundsol$json_api_plus$JsonApi_Base_Definition$JsonApiVersion,
		A3(_bundsol$json_api_plus$JsonApi_Base_Decode$optionalWithDefault, '1.0', 'version', _elm_lang$core$Json_Decode$string),
		_bundsol$json_api_plus$JsonApi_Base_Decode$optionalMetaDecoder(decoder));
	return A3(
		_bundsol$json_api_plus$JsonApi_Base_Decode$optionalWithDefault,
		A2(
			_bundsol$json_api_plus$JsonApi_Base_Definition$JsonApiVersion,
			'1.0',
			{ctor: '[]'}),
		'jsonapi',
		jsonapiObject);
};
var _bundsol$json_api_plus$JsonApi_Base_Decode$metaDocDecoder = function (decoder) {
	return A8(
		_elm_lang$core$Json_Decode$map7,
		_bundsol$json_api_plus$JsonApi_Base_Definition$Document,
		A2(
			_elm_lang$core$Json_Decode$field,
			'meta',
			_bundsol$json_api_plus$JsonApi_Base_Decode$generalPairListDecoder(decoder)),
		_bundsol$json_api_plus$JsonApi_Base_Decode$optionalJsonapiDecoder(decoder),
		_bundsol$json_api_plus$JsonApi_Base_Decode$preventDataPresence(true),
		_elm_lang$core$Json_Decode$succeed(
			{ctor: '[]'}),
		_bundsol$json_api_plus$JsonApi_Base_Decode$preventIncludedPresence,
		_bundsol$json_api_plus$JsonApi_Base_Decode$preventErrorPresence(true),
		_elm_lang$core$Json_Decode$succeed(_elm_lang$core$Maybe$Nothing));
};
var _bundsol$json_api_plus$JsonApi_Base_Decode$NoEmptiesPlease = {ctor: 'NoEmptiesPlease'};
var _bundsol$json_api_plus$JsonApi_Base_Decode$AllowEmpties = {ctor: 'AllowEmpties'};
var _bundsol$json_api_plus$JsonApi_Base_Decode$errorDecoder = function (decoder) {
	return A9(
		_elm_lang$core$Json_Decode$map8,
		_bundsol$json_api_plus$JsonApi_Base_Definition$Error,
		_bundsol$json_api_plus$JsonApi_Base_Decode$optionalErrorIdDecoder,
		A3(
			_bundsol$json_api_plus$JsonApi_Base_Decode$optionallyAllowLinks,
			decoder,
			{
				ctor: '::',
				_0: 'about',
				_1: {ctor: '[]'}
			},
			_bundsol$json_api_plus$JsonApi_Base_Decode$AllowEmpties),
		A3(_bundsol$json_api_plus$JsonApi_Base_Decode$optionalWithDefault, '', 'status', _elm_lang$core$Json_Decode$string),
		A3(_bundsol$json_api_plus$JsonApi_Base_Decode$optionalWithDefault, '', 'code', _elm_lang$core$Json_Decode$string),
		A3(_bundsol$json_api_plus$JsonApi_Base_Decode$optionalWithDefault, '', 'title', _elm_lang$core$Json_Decode$string),
		A3(_bundsol$json_api_plus$JsonApi_Base_Decode$optionalWithDefault, '', 'detail', _elm_lang$core$Json_Decode$string),
		_bundsol$json_api_plus$JsonApi_Base_Decode$errorSourceDecoder,
		_bundsol$json_api_plus$JsonApi_Base_Decode$optionalMetaDecoder(decoder));
};
var _bundsol$json_api_plus$JsonApi_Base_Decode$errorsDecoder = function (decoder) {
	return A8(
		_elm_lang$core$Json_Decode$map7,
		_bundsol$json_api_plus$JsonApi_Base_Definition$Document,
		_bundsol$json_api_plus$JsonApi_Base_Decode$optionalMetaDecoder(decoder),
		_bundsol$json_api_plus$JsonApi_Base_Decode$optionalJsonapiDecoder(decoder),
		_bundsol$json_api_plus$JsonApi_Base_Decode$preventDataPresence(false),
		_elm_lang$core$Json_Decode$succeed(
			{ctor: '[]'}),
		_bundsol$json_api_plus$JsonApi_Base_Decode$preventIncludedPresence,
		A2(
			_elm_lang$core$Json_Decode$field,
			'errors',
			_elm_lang$core$Json_Decode$list(
				_bundsol$json_api_plus$JsonApi_Base_Decode$errorDecoder(decoder))),
		_elm_lang$core$Json_Decode$succeed(_elm_lang$core$Maybe$Nothing));
};
var _bundsol$json_api_plus$JsonApi_Base_Decode$ForBuildingTags = {ctor: 'ForBuildingTags'};
var _bundsol$json_api_plus$JsonApi_Base_Decode$ForIncludedResource = {ctor: 'ForIncludedResource'};
var _bundsol$json_api_plus$JsonApi_Base_Decode$newPrimary = function (linkagePurpose) {
	var primaryId = _elm_lang$core$Json_Decode$oneOf(
		{
			ctor: '::',
			_0: _bundsol$json_api_plus$JsonApi_Base_Decode$nullOrAbsent('id'),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$core$Json_Decode$andThen,
					function (s) {
						var _p14 = _elm_lang$core$String$trim(s);
						switch (_p14) {
							case '':
								return _elm_lang$core$Json_Decode$succeed('');
							case 'new':
								return _elm_lang$core$Json_Decode$succeed('');
							default:
								return _elm_lang$core$Json_Decode$fail('Id must be empty or absent');
						}
					},
					A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$string)),
				_1: {ctor: '[]'}
			}
		});
	return (!_elm_lang$core$Native_Utils.eq(linkagePurpose, _bundsol$json_api_plus$JsonApi_Base_Decode$ForIncludedResource)) ? A4(
		_elm_lang$core$Json_Decode$map3,
		_bundsol$json_api_plus$JsonApi_Base_Definition$buildKey,
		_bundsol$json_api_plus$JsonApi_Base_Decode$nonEmpty('type'),
		primaryId,
		_elm_lang$core$Json_Decode$succeed(1)) : _bundsol$json_api_plus$JsonApi_Base_Decode$persistedIdKey;
};
var _bundsol$json_api_plus$JsonApi_Base_Decode$idKeyDecoder = F2(
	function (tags, linkagePurpose) {
		var isCataloged = function (_p15) {
			var _p16 = _p15;
			var _p19 = _p16._1._0;
			var _p18 = _p16._0;
			var _p17 = {
				ctor: '_Tuple2',
				_0: linkagePurpose,
				_1: A2(
					_elm_lang$core$Dict$get,
					{ctor: '_Tuple2', _0: _p19, _1: _p18},
					tags)
			};
			_v15_2:
			do {
				if (_p17.ctor === '_Tuple2') {
					if (_p17._0.ctor === 'ForBuildingTags') {
						return _elm_lang$core$Json_Decode$succeed(
							{ctor: '_Tuple3', _0: _p19, _1: '', _2: 2});
					} else {
						if (_p17._1.ctor === 'Just') {
							return _elm_lang$core$Json_Decode$succeed(
								{ctor: '_Tuple3', _0: _p19, _1: '', _2: _p17._1._0});
						} else {
							break _v15_2;
						}
					}
				} else {
					break _v15_2;
				}
			} while(false);
			return _elm_lang$core$Json_Decode$fail(
				A2(_elm_lang$core$Basics_ops['++'], _p18, ' is not a new resource tag'));
		};
		var newResourceId = A2(
			_elm_lang$core$Json_Decode$andThen,
			isCataloged,
			A3(
				_elm_lang$core$Json_Decode$map2,
				F2(
					function (v0, v1) {
						return {ctor: '_Tuple2', _0: v0, _1: v1};
					}),
				A2(
					_elm_lang$core$Json_Decode$field,
					'meta',
					_bundsol$json_api_plus$JsonApi_Base_Decode$nonEmpty('new-resource-tag')),
				A3(
					_elm_lang$core$Json_Decode$map2,
					F2(
						function (v0, v1) {
							return {ctor: '_Tuple2', _0: v0, _1: v1};
						}),
					_bundsol$json_api_plus$JsonApi_Base_Decode$nonEmpty('type'),
					A3(_bundsol$json_api_plus$JsonApi_Base_Decode$absent, _elm_lang$core$Maybe$Nothing, 'id', 'Id must not be present'))));
		return _elm_lang$core$Json_Decode$oneOf(
			{
				ctor: '::',
				_0: newResourceId,
				_1: {
					ctor: '::',
					_0: _bundsol$json_api_plus$JsonApi_Base_Decode$newPrimary(linkagePurpose),
					_1: {
						ctor: '::',
						_0: _bundsol$json_api_plus$JsonApi_Base_Decode$persistedIdKey,
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _bundsol$json_api_plus$JsonApi_Base_Decode$keySetDataDecoder = function (tags) {
	return A2(
		_elm_lang$core$Json_Decode$map,
		function (_p20) {
			return _bundsol$json_api_plus$JsonApi_Base_Definition$Ids(
				_elm_lang$core$Set$fromList(_p20));
		},
		_elm_lang$core$Json_Decode$list(
			A2(_bundsol$json_api_plus$JsonApi_Base_Decode$idKeyDecoder, tags, _bundsol$json_api_plus$JsonApi_Base_Decode$ForIncludedResource)));
};
var _bundsol$json_api_plus$JsonApi_Base_Decode$singleKeyDataDecoder = function (tags) {
	return _elm_lang$core$Json_Decode$oneOf(
		{
			ctor: '::',
			_0: A2(
				_elm_lang$core$Json_Decode$map,
				function (_p21) {
					return _bundsol$json_api_plus$JsonApi_Base_Definition$Id(
						_elm_lang$core$Maybe$Just(_p21));
				},
				A2(_bundsol$json_api_plus$JsonApi_Base_Decode$idKeyDecoder, tags, _bundsol$json_api_plus$JsonApi_Base_Decode$ForIncludedResource)),
			_1: {
				ctor: '::',
				_0: _elm_lang$core$Json_Decode$null(
					_bundsol$json_api_plus$JsonApi_Base_Definition$Id(_elm_lang$core$Maybe$Nothing)),
				_1: {ctor: '[]'}
			}
		});
};
var _bundsol$json_api_plus$JsonApi_Base_Decode$optionalRelationData = function (tags) {
	var dataDecoder = _elm_lang$core$Json_Decode$oneOf(
		{
			ctor: '::',
			_0: _bundsol$json_api_plus$JsonApi_Base_Decode$keySetDataDecoder(tags),
			_1: {
				ctor: '::',
				_0: _bundsol$json_api_plus$JsonApi_Base_Decode$singleKeyDataDecoder(tags),
				_1: {ctor: '[]'}
			}
		});
	return A3(_bundsol$json_api_plus$JsonApi_Base_Decode$optionalWithDefault, _bundsol$json_api_plus$JsonApi_Base_Definition$NotPresent, 'data', dataDecoder);
};
var _bundsol$json_api_plus$JsonApi_Base_Decode$relationshipDecoder = F2(
	function (tags, decoder) {
		return A2(
			_elm_lang$core$Json_Decode$andThen,
			function (atLeastOne) {
				var _p22 = atLeastOne;
				if (_p22 === false) {
					return _elm_lang$core$Json_Decode$fail('A relationship must have at least one of [\'data\', \'links\' or \'meta\']');
				} else {
					return A5(
						_elm_lang$core$Json_Decode$map4,
						_bundsol$json_api_plus$JsonApi_Base_Definition$Relationship,
						_bundsol$json_api_plus$JsonApi_Base_Decode$optionalRelationData(tags),
						A3(
							_bundsol$json_api_plus$JsonApi_Base_Decode$optionallyAllowLinks,
							decoder,
							{
								ctor: '::',
								_0: 'self',
								_1: {
									ctor: '::',
									_0: 'related',
									_1: {ctor: '[]'}
								}
							},
							_bundsol$json_api_plus$JsonApi_Base_Decode$NoEmptiesPlease),
						_bundsol$json_api_plus$JsonApi_Base_Decode$optionalMetaDecoder(decoder),
						_elm_lang$core$Json_Decode$succeed(false));
				}
			},
			_bundsol$json_api_plus$JsonApi_Base_Decode$detectOne(
				{
					ctor: '::',
					_0: 'data',
					_1: {
						ctor: '::',
						_0: 'links',
						_1: {
							ctor: '::',
							_0: 'meta',
							_1: {ctor: '[]'}
						}
					}
				}));
	});
var _bundsol$json_api_plus$JsonApi_Base_Decode$objectComplementDecoder = F2(
	function (tags, decoder) {
		return A7(
			_elm_lang$core$Json_Decode$map6,
			_bundsol$json_api_plus$JsonApi_Base_Definition$Complement,
			_bundsol$json_api_plus$JsonApi_Base_Decode$optionalAttributes(decoder),
			_elm_lang$core$Json_Decode$succeed(_elm_lang$core$Dict$empty),
			_bundsol$json_api_plus$JsonApi_Base_Decode$optionalMetaDecoder(decoder),
			A3(
				_bundsol$json_api_plus$JsonApi_Base_Decode$optionallyAllowLinks,
				decoder,
				{
					ctor: '::',
					_0: 'self',
					_1: {
						ctor: '::',
						_0: 'first',
						_1: {
							ctor: '::',
							_0: 'last',
							_1: {
								ctor: '::',
								_0: 'prev',
								_1: {
									ctor: '::',
									_0: 'next',
									_1: {ctor: '[]'}
								}
							}
						}
					}
				},
				_bundsol$json_api_plus$JsonApi_Base_Decode$AllowEmpties),
			A3(
				_bundsol$json_api_plus$JsonApi_Base_Decode$optionalWithDefault,
				_elm_lang$core$Dict$empty,
				'relationships',
				_elm_lang$core$Json_Decode$dict(
					A2(_bundsol$json_api_plus$JsonApi_Base_Decode$relationshipDecoder, tags, decoder))),
			_elm_lang$core$Json_Decode$succeed(false));
	});
var _bundsol$json_api_plus$JsonApi_Base_Decode$entryDecoder = F3(
	function (tags, decoder, linkagePurpose) {
		return A3(
			_elm_lang$core$Json_Decode$map2,
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				}),
			A2(_bundsol$json_api_plus$JsonApi_Base_Decode$idKeyDecoder, tags, linkagePurpose),
			A2(_bundsol$json_api_plus$JsonApi_Base_Decode$objectComplementDecoder, tags, decoder));
	});
var _bundsol$json_api_plus$JsonApi_Base_Decode$primaryDataEntriesDecoder = F2(
	function (decoder, _p23) {
		var _p24 = _p23;
		var _p26 = _p24._1;
		var one = function (entry) {
			var key = _elm_lang$core$Tuple$first(entry);
			return _elm_lang$core$Json_Decode$succeed(
				{
					ctor: '_Tuple3',
					_0: _bundsol$json_api_plus$JsonApi_Base_Definition$Id(
						_elm_lang$core$Maybe$Just(key)),
					_1: _elm_lang$core$List$singleton(entry),
					_2: _p26
				});
		};
		var many = function (entries) {
			return _elm_lang$core$Json_Decode$succeed(
				{
					ctor: '_Tuple3',
					_0: function (_p25) {
						return _bundsol$json_api_plus$JsonApi_Base_Definition$Ids(
							_elm_lang$core$Set$fromList(_p25));
					}(
						A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$first, entries)),
					_1: entries,
					_2: _p26
				});
		};
		return A2(
			_elm_lang$core$Json_Decode$field,
			'data',
			_elm_lang$core$Json_Decode$oneOf(
				{
					ctor: '::',
					_0: A2(
						_elm_lang$core$Json_Decode$andThen,
						many,
						_elm_lang$core$Json_Decode$list(
							A3(_bundsol$json_api_plus$JsonApi_Base_Decode$entryDecoder, _p26, decoder, _bundsol$json_api_plus$JsonApi_Base_Decode$ForIncludedResource))),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$core$Json_Decode$andThen,
							one,
							A3(_bundsol$json_api_plus$JsonApi_Base_Decode$entryDecoder, _p26, decoder, _p24._0)),
						_1: {
							ctor: '::',
							_0: _elm_lang$core$Json_Decode$null(
								{
									ctor: '_Tuple3',
									_0: _bundsol$json_api_plus$JsonApi_Base_Definition$Id(_elm_lang$core$Maybe$Nothing),
									_1: {ctor: '[]'},
									_2: _p26
								}),
							_1: {ctor: '[]'}
						}
					}
				}));
	});
var _bundsol$json_api_plus$JsonApi_Base_Decode$documentDecoder = F2(
	function (decoder, _p27) {
		var _p28 = _p27;
		var includedDecoder = A2(
			_elm_lang$core$Json_Decode$map,
			_elm_lang$core$Dict$fromList,
			A2(
				_elm_lang$core$Json_Decode$map,
				_elm_lang$core$List$append(_p28._1),
				A3(
					_bundsol$json_api_plus$JsonApi_Base_Decode$optionalWithDefault,
					{ctor: '[]'},
					'included',
					_elm_lang$core$Json_Decode$list(
						A3(_bundsol$json_api_plus$JsonApi_Base_Decode$entryDecoder, _p28._2, decoder, _bundsol$json_api_plus$JsonApi_Base_Decode$ForIncludedResource)))));
		return A8(
			_elm_lang$core$Json_Decode$map7,
			_bundsol$json_api_plus$JsonApi_Base_Definition$Document,
			_bundsol$json_api_plus$JsonApi_Base_Decode$optionalMetaDecoder(decoder),
			_bundsol$json_api_plus$JsonApi_Base_Decode$optionalJsonapiDecoder(decoder),
			_elm_lang$core$Json_Decode$succeed(_p28._0),
			A3(
				_bundsol$json_api_plus$JsonApi_Base_Decode$optionallyAllowLinks,
				decoder,
				{
					ctor: '::',
					_0: 'self',
					_1: {
						ctor: '::',
						_0: 'related',
						_1: {
							ctor: '::',
							_0: 'first',
							_1: {
								ctor: '::',
								_0: 'last',
								_1: {
									ctor: '::',
									_0: 'prev',
									_1: {
										ctor: '::',
										_0: 'next',
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				},
				_bundsol$json_api_plus$JsonApi_Base_Decode$AllowEmpties),
			includedDecoder,
			_bundsol$json_api_plus$JsonApi_Base_Decode$preventErrorPresence(false),
			_elm_lang$core$Json_Decode$succeed(_elm_lang$core$Maybe$Nothing));
	});
var _bundsol$json_api_plus$JsonApi_Base_Decode$ForNewResource = {ctor: 'ForNewResource'};
var _bundsol$json_api_plus$JsonApi_Base_Decode$NewIdEntry = F2(
	function (a, b) {
		return {ctor: 'NewIdEntry', _0: a, _1: b};
	});
var _bundsol$json_api_plus$JsonApi_Base_Decode$NotNew = {ctor: 'NotNew'};
var _bundsol$json_api_plus$JsonApi_Base_Decode$newIdEntryDecoder = _elm_lang$core$Json_Decode$oneOf(
	{
		ctor: '::',
		_0: A2(
			_elm_lang$core$Json_Decode$andThen,
			_elm_lang$core$Basics$always(
				A3(
					_elm_lang$core$Json_Decode$map2,
					_bundsol$json_api_plus$JsonApi_Base_Decode$NewIdEntry,
					_bundsol$json_api_plus$JsonApi_Base_Decode$nonEmpty('type'),
					A2(
						_elm_lang$core$Json_Decode$field,
						'meta',
						_bundsol$json_api_plus$JsonApi_Base_Decode$nonEmpty('new-resource-tag')))),
			A3(_bundsol$json_api_plus$JsonApi_Base_Decode$absent, _bundsol$json_api_plus$JsonApi_Base_Decode$NotNew, 'id', 'It is not supposed to have an \'id\'')),
		_1: {
			ctor: '::',
			_0: _elm_lang$core$Json_Decode$succeed(_bundsol$json_api_plus$JsonApi_Base_Decode$NotNew),
			_1: {ctor: '[]'}
		}
	});
var _bundsol$json_api_plus$JsonApi_Base_Decode$withDataNewEntries = _elm_lang$core$Json_Decode$oneOf(
	{
		ctor: '::',
		_0: A2(
			_elm_lang$core$Json_Decode$field,
			'data',
			_elm_lang$core$Json_Decode$list(_bundsol$json_api_plus$JsonApi_Base_Decode$newIdEntryDecoder)),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$core$Json_Decode$map,
				_elm_lang$core$List$singleton,
				A2(_elm_lang$core$Json_Decode$field, 'data', _bundsol$json_api_plus$JsonApi_Base_Decode$newIdEntryDecoder)),
			_1: {ctor: '[]'}
		}
	});
var _bundsol$json_api_plus$JsonApi_Base_Decode$relsNewIdsDecoder = function () {
	var decoder = _elm_lang$core$Json_Decode$oneOf(
		{
			ctor: '::',
			_0: _elm_lang$core$Json_Decode$dict(_bundsol$json_api_plus$JsonApi_Base_Decode$withDataNewEntries),
			_1: {
				ctor: '::',
				_0: _elm_lang$core$Json_Decode$succeed(_elm_lang$core$Dict$empty),
				_1: {ctor: '[]'}
			}
		});
	return A2(
		_elm_lang$core$Json_Decode$map,
		function (_p29) {
			return _elm_lang$core$List$concat(
				_elm_lang$core$Dict$values(_p29));
		},
		A3(_bundsol$json_api_plus$JsonApi_Base_Decode$optionalWithDefault, _elm_lang$core$Dict$empty, 'relationships', decoder));
}();
var _bundsol$json_api_plus$JsonApi_Base_Decode$figureOutNewTags = function (linkagePurpose) {
	var primaryRelsDecoder = _elm_lang$core$Json_Decode$oneOf(
		{
			ctor: '::',
			_0: A2(
				_elm_lang$core$Json_Decode$map,
				_elm_lang$core$List$concat,
				A2(
					_elm_lang$core$Json_Decode$field,
					'data',
					_elm_lang$core$Json_Decode$list(_bundsol$json_api_plus$JsonApi_Base_Decode$relsNewIdsDecoder))),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$core$Json_Decode$field, 'data', _bundsol$json_api_plus$JsonApi_Base_Decode$relsNewIdsDecoder),
				_1: {
					ctor: '::',
					_0: _elm_lang$core$Json_Decode$succeed(
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			}
		});
	var primaryAsEntries = A2(
		_elm_lang$core$Json_Decode$map,
		function (entries) {
			var _p30 = entries;
			if (((_p30.ctor === '::') && (_p30._0.ctor === 'NewIdEntry')) && (_p30._1.ctor === '[]')) {
				return {ctor: '_Tuple2', _0: _bundsol$json_api_plus$JsonApi_Base_Decode$ForNewResource, _1: entries};
			} else {
				return {ctor: '_Tuple2', _0: linkagePurpose, _1: entries};
			}
		},
		_elm_lang$core$Json_Decode$oneOf(
			{
				ctor: '::',
				_0: A3(
					_elm_lang$core$Json_Decode$map2,
					F2(
						function (_p31, mtag) {
							var _p32 = _p31;
							var _p34 = _p32._0;
							var _p33 = mtag;
							if (_p33.ctor === 'Just') {
								return {
									ctor: '::',
									_0: A2(_bundsol$json_api_plus$JsonApi_Base_Decode$NewIdEntry, _p34, _p33._0),
									_1: {ctor: '[]'}
								};
							} else {
								return {
									ctor: '::',
									_0: A2(_bundsol$json_api_plus$JsonApi_Base_Decode$NewIdEntry, _p34, ''),
									_1: {ctor: '[]'}
								};
							}
						}),
					A2(
						_elm_lang$core$Json_Decode$field,
						'data',
						_bundsol$json_api_plus$JsonApi_Base_Decode$newPrimary(linkagePurpose)),
					_elm_lang$core$Json_Decode$maybe(
						A2(
							_elm_lang$core$Json_Decode$at,
							{
								ctor: '::',
								_0: 'data',
								_1: {
									ctor: '::',
									_0: 'meta',
									_1: {ctor: '[]'}
								}
							},
							_bundsol$json_api_plus$JsonApi_Base_Decode$nonEmpty('new-resource-tag')))),
				_1: {
					ctor: '::',
					_0: _bundsol$json_api_plus$JsonApi_Base_Decode$withDataNewEntries,
					_1: {
						ctor: '::',
						_0: _elm_lang$core$Json_Decode$succeed(
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}));
	var buildTags = F3(
		function (key, item, accum) {
			return A2(
				_elm_lang$core$Dict$union,
				accum,
				_elm_lang$core$Dict$fromList(
					A2(
						_elm_lang$core$List$map,
						_elm_lang$core$Tuple$mapSecond(
							F2(
								function (x, y) {
									return x + y;
								})(1)),
						A2(
							_elm_lang$core$List$indexedMap,
							_elm_lang$core$Basics$flip(
								F2(
									function (v0, v1) {
										return {ctor: '_Tuple2', _0: v0, _1: v1};
									})),
							A2(
								_elm_lang$core$List$map,
								F2(
									function (v0, v1) {
										return {ctor: '_Tuple2', _0: v0, _1: v1};
									})(key),
								_elm_lang$core$Set$toList(item))))));
		});
	var build = F2(
		function (item, accum) {
			var _p35 = item;
			if (_p35.ctor === 'NewIdEntry') {
				var _p38 = _p35._0;
				var _p37 = _p35._1;
				return A3(
					_elm_lang$core$Dict$insert,
					_p38,
					function () {
						var _p36 = A2(_elm_lang$core$Dict$get, _p38, accum);
						if (_p36.ctor === 'Nothing') {
							return _elm_lang$core$Set$singleton(_p37);
						} else {
							return A2(_elm_lang$core$Set$insert, _p37, _p36._0);
						}
					}(),
					accum);
			} else {
				return accum;
			}
		});
	var groups = function (entries) {
		return A3(_elm_lang$core$List$foldl, build, _elm_lang$core$Dict$empty, entries);
	};
	var scan = F3(
		function (_p39, primaryRels, includedRels) {
			var _p40 = _p39;
			return A2(
				F2(
					function (v0, v1) {
						return {ctor: '_Tuple2', _0: v0, _1: v1};
					}),
				_p40._0,
				A3(
					_elm_lang$core$Dict$foldl,
					buildTags,
					_elm_lang$core$Dict$empty,
					groups(
						_elm_lang$core$List$concat(
							{
								ctor: '::',
								_0: _p40._1,
								_1: {
									ctor: '::',
									_0: primaryRels,
									_1: {
										ctor: '::',
										_0: includedRels,
										_1: {ctor: '[]'}
									}
								}
							}))));
		});
	return A4(
		_elm_lang$core$Json_Decode$map3,
		scan,
		primaryAsEntries,
		primaryRelsDecoder,
		A2(
			_elm_lang$core$Json_Decode$map,
			_elm_lang$core$List$concat,
			A3(
				_bundsol$json_api_plus$JsonApi_Base_Decode$optionalWithDefault,
				{ctor: '[]'},
				'included',
				_elm_lang$core$Json_Decode$list(_bundsol$json_api_plus$JsonApi_Base_Decode$relsNewIdsDecoder))));
};
var _bundsol$json_api_plus$JsonApi_Base_Decode$topLevelDecoder = F3(
	function (decoder, idTagger, taggers) {
		var translator = function (b) {
			return b ? _bundsol$json_api_plus$JsonApi_Base_Decode$ForBuildingTags : A2(_elm_lang$core$Debug$log, 'TRANSLATED', _bundsol$json_api_plus$JsonApi_Base_Decode$ForIncludedResource);
		};
		return _elm_lang$core$Json_Decode$oneOf(
			{
				ctor: '::',
				_0: A2(
					_elm_lang$core$Json_Decode$andThen,
					A2(_bundsol$json_api_plus$JsonApi_Base_Decode$tagDocument, idTagger, taggers),
					A2(
						_elm_lang$core$Json_Decode$andThen,
						_bundsol$json_api_plus$JsonApi_Base_Decode$documentDecoder(decoder),
						A2(
							_elm_lang$core$Json_Decode$andThen,
							_bundsol$json_api_plus$JsonApi_Base_Decode$primaryDataEntriesDecoder(decoder),
							A2(
								_elm_lang$core$Json_Decode$andThen,
								_bundsol$json_api_plus$JsonApi_Base_Decode$figureOutNewTags,
								A2(
									_elm_lang$core$Json_Decode$map,
									_elm_lang$core$Maybe$withDefault(_bundsol$json_api_plus$JsonApi_Base_Decode$ForIncludedResource),
									_elm_lang$core$Json_Decode$maybe(
										A2(
											_elm_lang$core$Json_Decode$map,
											translator,
											A2(
												_elm_lang$core$Json_Decode$at,
												{
													ctor: '::',
													_0: 'meta',
													_1: {
														ctor: '::',
														_0: 'is-new',
														_1: {ctor: '[]'}
													}
												},
												_elm_lang$core$Json_Decode$bool)))))))),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$core$Json_Decode$map,
						F2(
							function (v0, v1) {
								return {ctor: '_Tuple2', _0: v0, _1: v1};
							})(taggers.errors),
						_bundsol$json_api_plus$JsonApi_Base_Decode$errorsDecoder(decoder)),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$core$Json_Decode$map,
							F2(
								function (v0, v1) {
									return {ctor: '_Tuple2', _0: v0, _1: v1};
								})(taggers.meta),
							_bundsol$json_api_plus$JsonApi_Base_Decode$metaDocDecoder(decoder)),
						_1: {ctor: '[]'}
					}
				}
			});
	});
