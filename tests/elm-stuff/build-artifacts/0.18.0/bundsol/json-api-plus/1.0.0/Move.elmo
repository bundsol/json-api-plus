var _bundsol$json_api_plus$Move$moveValue = function (name) {
	return A2(
		_elm_community$elm_test$Test$test,
		name,
		function (_p0) {
			var g = A3(
				_bundsol$json_api_plus$JsonApi_Setter$setProperty,
				'hobby',
				_bundsol$boxed$Boxed$Str('Play guitar'),
				_bundsol$json_api_plus$JsonApi_Test_SampleData$userGuide);
			var moved = A2(
				_bundsol$json_api_plus$JsonApi_Setter$move,
				_bundsol$json_api_plus$JsonApi_Setter$Outbound('hobby'),
				g);
			var result = {
				ctor: '_Tuple2',
				_0: A2(_bundsol$json_api_plus$JsonApi_Getter$getString, 'hobby', moved),
				_1: A2(_bundsol$json_api_plus$JsonApi_Getter$getLocalString, 'hobby', moved)
			};
			return A2(
				_elm_community$elm_test$Expect$equal,
				result,
				{
					ctor: '_Tuple2',
					_0: _elm_lang$core$Maybe$Nothing,
					_1: _elm_lang$core$Maybe$Just('Play guitar')
				});
		});
};
var _bundsol$json_api_plus$Move$copyValues = function (name) {
	return A2(
		_elm_community$elm_test$Test$test,
		name,
		function (_p1) {
			var g = A3(
				_bundsol$json_api_plus$JsonApi_Setter$setLocal,
				'age',
				_bundsol$boxed$Boxed$Integer(30),
				A3(
					_bundsol$json_api_plus$JsonApi_Setter$setProperty,
					'hobby',
					_bundsol$boxed$Boxed$Str('Play guitar'),
					_bundsol$json_api_plus$JsonApi_Test_SampleData$userGuide));
			var copied = A3(
				_bundsol$json_api_plus$JsonApi_Setter$copy,
				_bundsol$json_api_plus$JsonApi_Setter$Local('age'),
				_bundsol$json_api_plus$JsonApi_Setter$Outbound('hobby'),
				g);
			var result = A2(_bundsol$json_api_plus$JsonApi_Getter$getProperty, 'hobby', copied);
			return A2(
				_elm_community$elm_test$Expect$equal,
				result,
				_elm_lang$core$Maybe$Just(
					_bundsol$boxed$Boxed$Integer(30)));
		});
};
var _bundsol$json_api_plus$Move$tradePlaces = function (name) {
	return A2(
		_elm_community$elm_test$Test$test,
		name,
		function (_p2) {
			var g = A3(
				_bundsol$json_api_plus$JsonApi_Setter$setLocal,
				'age',
				_bundsol$boxed$Boxed$Integer(30),
				A3(
					_bundsol$json_api_plus$JsonApi_Setter$setProperty,
					'hobby',
					_bundsol$boxed$Boxed$Str('Play guitar'),
					_bundsol$json_api_plus$JsonApi_Test_SampleData$userGuide));
			var traded = A3(
				_bundsol$json_api_plus$JsonApi_Setter$trade,
				_bundsol$json_api_plus$JsonApi_Setter$Local('age'),
				_bundsol$json_api_plus$JsonApi_Setter$Outbound('hobby'),
				g);
			var result = {
				ctor: '_Tuple4',
				_0: A2(_bundsol$json_api_plus$JsonApi_Getter$getLocalString, 'hobby', traded),
				_1: A2(_bundsol$json_api_plus$JsonApi_Getter$getInt, 'age', traded),
				_2: A2(_bundsol$json_api_plus$JsonApi_Getter$getProperty, 'hobby', traded),
				_3: A2(_bundsol$json_api_plus$JsonApi_Getter$getLocal, 'age', traded)
			};
			return A2(
				_elm_community$elm_test$Expect$equal,
				result,
				{
					ctor: '_Tuple4',
					_0: _elm_lang$core$Maybe$Just('Play guitar'),
					_1: _elm_lang$core$Maybe$Just(30),
					_2: _elm_lang$core$Maybe$Nothing,
					_3: _elm_lang$core$Maybe$Nothing
				});
		});
};
var _bundsol$json_api_plus$Move$interchange = function (name) {
	return A2(
		_elm_community$elm_test$Test$test,
		name,
		function (_p3) {
			var g = A3(
				_bundsol$json_api_plus$JsonApi_Setter$setLocal,
				'age',
				_bundsol$boxed$Boxed$Integer(30),
				A3(
					_bundsol$json_api_plus$JsonApi_Setter$setProperty,
					'hobby',
					_bundsol$boxed$Boxed$Str('Play guitar'),
					_bundsol$json_api_plus$JsonApi_Test_SampleData$userGuide));
			var swapped = A2(
				_elm_lang$core$Tuple$mapSecond,
				A2(_bundsol$json_api_plus$JsonApi_Getter$localDefaultString, 'Studying', 'age'),
				A2(
					_elm_lang$core$Tuple$mapFirst,
					A2(_bundsol$json_api_plus$JsonApi_Getter$defaultInt, 777, 'hobby'),
					_bundsol$json_api_plus$JsonApi_Base_Utility$tuplicate(
						A3(
							_bundsol$json_api_plus$JsonApi_Setter$swap,
							_bundsol$json_api_plus$JsonApi_Setter$Local('age'),
							_bundsol$json_api_plus$JsonApi_Setter$Outbound('hobby'),
							g))));
			return A2(
				_elm_community$elm_test$Expect$equal,
				swapped,
				{ctor: '_Tuple2', _0: 30, _1: 'Play guitar'});
		});
};
var _bundsol$json_api_plus$Move$suite = A2(
	_elm_community$elm_test$Test$describe,
	'Moving values from a variable to another',
	{
		ctor: '::',
		_0: _bundsol$json_api_plus$Move$interchange('swap local with outbound'),
		_1: {
			ctor: '::',
			_0: _bundsol$json_api_plus$Move$tradePlaces('even the name changed locations'),
			_1: {
				ctor: '::',
				_0: _bundsol$json_api_plus$Move$copyValues('copy the value of a variable into another'),
				_1: {
					ctor: '::',
					_0: _bundsol$json_api_plus$Move$moveValue('change locality of variable'),
					_1: {ctor: '[]'}
				}
			}
		}
	});
